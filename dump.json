[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "lib/flatten.js",
    "content": "import { isCreateRestInstance } from './index'\n\n/**\n * Recursive flatten\n * @private\n * @param {RestRoutes} routes Routes object from `createRest()`\n * @param {string} prefix Add prefix to each route path\n * @param {RestRoutes} parent Parent routes\n */\nfunction flattenize(routes, prefix, parent) {\n  const list = {}\n\n  Object.keys(routes.local).forEach((method) => {\n    const localName = prefix === '' ? '/' : `${prefix}/`\n\n    if (!list[localName]) {\n      list[localName] = {}\n    }\n    list[localName][method] = [].concat(\n      parent.before,\n      routes.before,\n      routes.local[method],\n      routes.after,\n      parent.after\n    )\n  })\n\n  Object.keys(routes.scoped).forEach((scope) => {\n    const scoped = routes.scoped[scope]\n    const listeners = flattenize(scoped, `${prefix}/${scope}`, {\n      before: parent.before.concat(routes.before),\n      after: routes.after.concat(parent.after),\n    })\n    Object.assign(list, listeners)\n  })\n\n  return list\n}\n\n/**\n * Convert original deep routes to flat object\n * @param {RestRoutes} routes Original routes from `createRest()`\n * @return {object} Flattened routes object\n * @example\n * const handler = () => {}\n * const routes = createRest(r => { r.get('foo', handler) })\n * const flatRoutes = flattenRoutes(routes)\n *\n * test.deepEqual(\n *   flatRoutes,\n *   {\n *     '/foo/': {\n *       GET: [handler],\n *     },\n *   },\n * )\n */\nexport function flattenRoutes(routes) {\n  if (!isCreateRestInstance(routes)) {\n    throw new Error('You can flatten only createRest routes')\n  }\n  return flattenize(routes, '', { before: [], after: [] })\n}\n",
    "static": true,
    "longname": "lib/flatten.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "function",
    "name": "flattenize",
    "memberof": "lib/flatten.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/flatten.js~flattenize",
    "access": "private",
    "export": false,
    "importPath": "createrest/lib/flatten.js",
    "importStyle": null,
    "description": "Recursive flatten",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "RestRoutes"
        ],
        "spread": false,
        "optional": false,
        "name": "routes",
        "description": "Routes object from `createRest()`"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "prefix",
        "description": "Add prefix to each route path"
      },
      {
        "nullable": null,
        "types": [
          "RestRoutes"
        ],
        "spread": false,
        "optional": false,
        "name": "parent",
        "description": "Parent routes"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2,
    "kind": "function",
    "name": "flattenRoutes",
    "memberof": "lib/flatten.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/flatten.js~flattenRoutes",
    "access": null,
    "export": true,
    "importPath": "createrest/lib/flatten.js",
    "importStyle": "{flattenRoutes}",
    "description": "Convert original deep routes to flat object",
    "examples": [
      "const handler = () => {}\nconst routes = createRest(r => { r.get('foo', handler) })\nconst flatRoutes = flattenRoutes(routes)\n\ntest.deepEqual(\n  flatRoutes,\n  {\n    '/foo/': {\n      GET: [handler],\n    },\n  },\n)"
    ],
    "lineNumber": 58,
    "params": [
      {
        "nullable": null,
        "types": [
          "RestRoutes"
        ],
        "spread": false,
        "optional": false,
        "name": "routes",
        "description": "Original routes from `createRest()`"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "Flattened routes object"
    }
  },
  {
    "__docId__": 3,
    "kind": "file",
    "name": "lib/index.js",
    "content": "import pluralize from 'pluralize'\nimport { createRestInstanceSymbol } from './symbol'\n\n/**\n * @desc Controller object for `crud()` method {@link RestRoutes}\n * @since 0.9.0\n * @typedef {object} CrudController\n * @property {function} [beforeEach] Called before each request\n * @property {function} [afterEach] Called after each request\n * @property {function} [read] Handle GET /name\n * @property {function} [create] Handle POST /name\n * @property {function} [update] Handle PUT /name\n * @property {function} [destroy] handle DELETE /name\n * @example\n * const DemoController = {\n *   beforeEach(req, res, next) {\n *     // any checks here\n *     next()\n *   },\n *   create(req, res, next) {\n *     context.makeDemo.create(req.params)\n *     res.json({ complete: true })\n *     next()\n *   },\n *   afterEach(req, res, next) {\n *     // close your resources here\n *     context.db.close()\n *   }\n * }\n */\n\n/**\n * @desc Controller object for `resources()` method. See {@link Maker.resources}\n * @since 0.9.0\n * @typedef {object} ResourcesController\n * @property {function} [beforeEach]  Hook will invoke before each handler in controller\n * @property {function} [afterEach]  Hook will invoke before after handler in controller\n * @property {function} [index]\n * @property {function} [create]\n * @property {function} [read]\n * @property {function} [update]\n * @property {function} [patch]\n * @property {function} [destroy]\n */\n\n/**\n * Check is correct routes passed\n * @public\n * @since 0.7.0\n * @function\n * @param {RestRoutes} routes\n * @return {boolean}\n */\nexport const isCreateRestInstance = routes => routes[createRestInstanceSymbol] === true\n\n/**\n * @desc Routes object\n * @protected\n * @typedef {object} RestRoutes\n * @property {Symbol} Symbol(createRestInstanceSymbol)\n * @property {object[]} before\n * @property {object[]} after\n * @property {object} scoped\n * @property {object} local\n */\n\n/**\n * @class Maker\n * @protected\n */\nexport class Maker {\n  /**\n   * @private\n   */\n  constructor() {\n    /**\n     * @ignore\n     */\n    this.ctx = {\n      before: [],\n      after: [],\n      scoped: {},\n      local: {},\n    }\n  }\n\n  /**\n   * @private\n   * Build routes ast\n   */\n  build() {\n    const scoped = {}\n    Object.keys(this.ctx.scoped).forEach((name) => {\n      scoped[name] = this.ctx.scoped[name].build()\n    })\n    return Object.assign({}, this.ctx, { scoped, [createRestInstanceSymbol]: true })\n  }\n\n  /**\n   * Add middlewares before request handler to current scope and all child scope\n   * @param {...function} list List of the middlewares\n   *\n   * @example\n   * const beforeHandler = () => console.log('before')\n   * const getHandler = () => console.log('get')\n   *\n   * createRest(root => {\n   *   root.beforeEach(beforeHandler)\n   *   // GET /demo    beforeHandler(); getHandler()\n   *   root.get('/demo', getHandler)\n   * })\n   * // Output:\n   * // > before\n   * // > get\n   * @example <caption>With variable count</caption>\n   * const handle1 = () => console.log('handle1')\n   * const handle2 = () => console.log('handle2')\n   *\n   * createRest(root => {\n   *   root.beforeEach(handle1, handle2)\n   *   // same as\n   *   root.beforeEach(handle1)\n   *   root.beforeEach(handle2)\n   * })\n   */\n  beforeEach(...list) {\n    this.ctx.before = this.ctx.before.concat(list.filter(ln => !!ln))\n  }\n\n  /**\n   * Add middlewares after request handler to current scope and all child scope\n   * @param {...function} list List of the middlewares\n   * @example\n   * const getHandler = () => console.log('get')\n   * const afterHandler = () => console.log('after')\n   *\n   * createRest(root => {\n   *   root.afterEach(afterHandler)\n   *   // GET /demo    getHandler(); afterHandler()\n   *   root.get('/demo', getHandler)\n   * })\n   * // Output:\n   * // > get\n   * // > after\n   * @example <caption>You can combine beforeEach and afterEach</caption>\n   * const getHandler = () => console.log('get foo')\n   * const deleteHandler = () => console.log('DELETE requested')\n   * const before1 = () => console.log('That is before 1')\n   * const before2 = () => console.log('Second before')\n   * const after = () => console.log('Just after request')\n   *\n   * const routes = createRest(root => {\n   *   root.beforeEach(before1, before2)\n   *   root.afterEach(after)\n   *\n   *   // GET /foo    before1(); before2(); getHandler(); after()\n   *   root.get('/foo', getHandler)\n   *\n   *   root.scope('bar', bar => {\n   *     // DELETE /bar/baz    before1(); before2(); deleteHandler(); after()\n   *     bar.delete('/baz', deleteHandler)\n   *   })\n   * })\n   * // Output on GET /foo request:\n   * // > That is before 1\n   * // > Second before\n   * // > get foo\n   * // > Just after request\n   *\n   * // Output on DELETE /bar/baz\n   * // > That is before 1\n   * // > Second before\n   * // > DELETE requested\n   * // > Just after request\n   */\n  afterEach(...list) {\n    this.ctx.after = this.ctx.after.concat(list.filter(ln => !!ln))\n  }\n\n  /**\n   * Add scoped address, before/after handlers and simple handlers.<br/>\n   * Before/After handlers is inherits from parent scope.<br/>\n   * Scopes with the same name will be merged\n   *\n   * @param {string} name Name of the scope\n   * @param {function(scope: Maker): void} creator\n   * @throws {Error} \"Name of the scope should be a word\"\n   * @throws {TypeError} \"Name of the scope should be string!\"\n   * @return {void}\n   * @since 0.2.0\n   * @example\n   * const before1 = () => console.log('before1')\n   * const before2 = () => console.log('before2')\n   * const after1 = () => console.log('after1')\n   * const after2 = () => console.log('after2')\n   * const bazHandler = () => console.log('baz')\n   * const barHandler = () => console.log('bar')\n   *\n   * createRest(root => {\n   *   root.beforeEach(before1)\n   *   root.afterEach(after1)\n   *\n   *   // POST /baz   before1(); bazHandler(); after1()\n   *   root.post('baz', bazHandler)\n   *\n   *   root.scope('foo', foo => {\n   *     foo.beforeEach(before2)\n   *     foo.afterEach(after2)\n   *\n   *     // GET /foo/bar   before1(); before2(); barHandler(); after2(); after1()\n   *     foo.get('bar', barHandler)\n   *   })\n   * })\n   */\n  scope(name, creator) {\n    if (typeof name !== 'string') {\n      throw new TypeError('Name of the scope should be string!')\n    }\n    if (name.length === 0 || name.indexOf('/') !== -1) {\n      throw new Error('Name of the scope should be a word')\n    }\n\n    const scopedCtx = this.ctx.scoped[name] || new Maker()\n    creator(scopedCtx)\n    this.ctx.scoped[name] = scopedCtx\n  }\n\n  /**\n   * Add HTTP method listeners to local\n   *\n   * @private\n   * @param {string} method\n   * @param {function[]} listeners\n   */\n  local(method, listeners) {\n    // if listeners for that methods exists, simple merge\n    if (this.ctx.local[method]) {\n      this.ctx.local[method] = this.ctx.local[method].concat(listeners)\n    }\n    else {\n      this.ctx.local[method] = listeners\n    }\n  }\n\n  /**\n   * Handle method creator\n   *\n   * @ignore\n   * @param {string} name\n   * @param {string} method\n   * @param {function[]} listeners\n   */\n  method(method, _listeners) {\n    let name = ''\n    let listeners = _listeners\n    if (typeof listeners[0] === 'string') {\n      name = listeners.splice(0, 1)[0]\n    }\n    name = name.replace(/^\\//gm, '')\n\n    if (name.indexOf('/') !== -1) {\n      throw new Error('Path should not be deep')\n    }\n    if (listeners.length === 0) {\n      throw new TypeError('Maybe you forget to add listener?')\n    }\n\n    listeners = listeners.filter(e => typeof e === 'function')\n\n    // if added undefined listeners\n    if (listeners.length === 0) return\n\n    if (name !== '') {\n      let scoped = this.ctx.scoped[name]\n      if (!scoped) {\n        scoped = new Maker()\n        this.ctx.scoped[name] = scoped\n      }\n\n      scoped.local(method, listeners)\n    }\n    else {\n      this.local(method, listeners)\n    }\n  }\n\n  /**\n   * Handle POST HTTP method with single or many handlers\n   * @param {string} [name] Route path. Default is current scope\n   * @param {...function} handlers List of http-handlers\n   * @throws {Error} Path should not be deep\n   * @throws {TypeError} Maybe you forget to add listener?\n   * @example\n   * createRest(root => {\n   *   root.post('name', () => console.log('Handled post /name request'))\n   *   root.post(() => console.log('Handled post / request'))\n   *   root.post('create',\n   *     (req, res, next) => next(),\n   *     authorize('user'),\n   *     () => console.log('Handled post /create with middlewares')\n   *   )\n   * })\n   */\n  post(name, ...handlers) {\n    this.method('POST', [name, ...handlers])\n  }\n\n  /**\n   * Handle GET HTTP method with single or many handlers\n   * @param {string} [name] Route path. Default is current scope\n   * @param {...function} handlers List of http-handlers\n   * @throws {Error} Path should not be deep\n   * @throws {TypeError} Maybe you forget to add listener?\n   * @example\n   * createRest(root => {\n   *   root.get('name', () => console.log('Handled get /name request'))\n   *   root.get(() => console.log('Handled get / request'))\n   *   root.get('create',\n   *     (req, res, next) => next(),\n   *     authorize('user'),\n   *     () => console.log('Handled get /create with middlewares')\n   *   )\n   * })\n   */\n  get(name, ...handlers) {\n    this.method('GET', [name, ...handlers])\n  }\n\n  /**\n   * Handle PUT HTTP method with single or many handlers\n   * @param {string} [name] Route path. Default is current scope\n   * @param {...function} handlers List of http-handlers\n   * @throws {Error} Path should not be deep\n   * @throws {TypeError} Maybe you forget to add listener?\n   * @example\n   * createRest(root => {\n   *   root.put('name', () => console.log('Handled put /name request'))\n   *   root.put(() => console.log('Handled put / request'))\n   *   root.put('create',\n   *     (req, res, next) => next(),\n   *     authorize('user'),\n   *     () => console.log('Handled put /create with middlewares')\n   *   )\n   * })\n   */\n  put(name, ...handlers) {\n    this.method('PUT', [name, ...handlers])\n  }\n\n  /**\n   * Handle DELETE HTTP method with single or many handlers\n   * @param {string} [name] Route path. Default is current scope\n   * @param {...function} handlers List of http-handlers\n   * @throws {Error} Path should not be deep\n   * @throws {TypeError} Maybe you forget to add listener?\n   * @example\n   * createRest(root => {\n   *   root.delete('name', () => console.log('Handled delete /name request'))\n   *   root.delete(() => console.log('Handled delete / request'))\n   *   root.delete('create',\n   *     (req, res, next) => next(),\n   *     authorize('user'),\n   *     () => console.log('Handled delete /create with middlewares')\n   *   )\n   * })\n   */\n  delete(name, ...handlers) {\n    this.method('DELETE', [name, ...handlers])\n  }\n\n  /**\n   * Handle PATCH HTTP method with single or many handlers\n   * @param {string} [name] Route path. Default is current scope\n   * @param {...function} handlers List of http-handlers\n   * @throws {Error} Path should not be deep\n   * @throws {TypeError} Maybe you forget to add listener?\n   * @example\n   * createRest(root => {\n   *   root.patch('name', () => console.log('Handled patch /name request'))\n   *   root.patch(() => console.log('Handled patch / request'))\n   *   root.patch('create',\n   *     (req, res, next) => next(),\n   *     authorize('user'),\n   *     () => console.log('Handled patch /create with middlewares')\n   *   )\n   * })\n   */\n  patch(name, ...handlers) {\n    this.method('PATCH', [name, ...handlers])\n  }\n\n  /**\n   * @desc Configure your `crud('name', controller, options)` <br /> See {@link Maker.crud}\n   * @typedef {object} crudOptions\n   * @property {string[]} [only] Keep only that handlers: `read`, `create`, `update`, `destroy`\n   * @property {string[]} [except] Keep all except that handlers\n   * @property {object} [methodNames] Change method names\n   * @since 0.9.0\n   *\n   * @example <caption>Usage with `only`</caption>\n   * createRest(root => {\n   *   root.crud('foo', FooController, { only: ['read'] })\n   * })\n   *\n   * @example <caption>Usage with `except`</caption>\n   * createRest(root => {\n   *   root.crud('bar', BarController, { except: ['destroy', 'update'] })\n   * })\n   *\n   * @example <caption>Method names</caption>\n   * const Controller = {\n   *   createDemo() {},\n   *   updateMe() {},\n   *   justExample() {},\n   *   youDontNeedThis() {},\n   * }\n   * createRest(root => {\n   *   root.crud('demo', Controller, { methodNames: {\n   *     read: 'justExample', create: 'createDemo', update: 'updateMe', destroy: 'youDontNeedThis',\n   *   }})\n   * })\n   */\n\n  /**\n   * Add CRUD methods for single resource. <br/>\n   * CRUD methods not merging. __Use only one crud for path.__\n   * @param {string} name Name of the resource. Create route path from\n   * @param {CrudController} controller Object with methods\n   * @param {crudOptions} [options={}] Options object\n   * @param {function(scope: Maker): void} [creator=null] Scoped creator function\n   * @since 0.9.0\n   * @example <caption>Simple</caption>\n   * const Controller = {\n   *   read() {},\n   *   create() {},\n   *   update() {},\n   *   destroy() {},\n   *   beforeEach() {},\n   *   afterEach() {},\n   * }\n   * const routes = createRest(root => {\n   *   // GET /example     read()\n   *   // POST /example    create()\n   *   // PUT /example     update()\n   *   // DELETE /example  destroy()\n   *   root.crud('example', Controller)\n   * })\n   * @example <caption>Only/Except option</caption>\n   * const Controller = {\n   *   read() {},\n   *   create() {},\n   *   update() {},\n   *   destroy() {},\n   *   beforeEach() {},\n   *   afterEach() {},\n   * }\n   * const routes = createRest(root => {\n   *   // GET /demo    read()\n   *   // POST /demo   create()\n   *   root.crud('demo', Controller, { only: ['create', 'read'] })\n   *\n   *   // GET /single     read()\n   *   // PUT /single     update()\n   *   root.crud('single', Controller, { except: ['destroy', 'create'] })\n   * })\n   * @example <caption>With scope</caption>\n   * const routes = createRest(root => {\n   *   // GET /example\n   *   // POST /example\n   *   // PUT /example\n   *   // DELETE /example\n   *   root.crud('example', Controller, {}, example => {\n   *     // GET /example/demo\n   *     example.get('/demo', () => {})\n   *   })\n   * })\n   */\n  crud(name, controller, options = {}, creator = null) {\n    if (!name || name.length === 0) {\n      throw new Error('Resource should be named')\n    }\n\n    if (typeof controller === 'undefined') {\n      return\n    }\n\n    const methods = {\n      read: 'get',\n      create: 'post',\n      update: 'put',\n      destroy: 'delete',\n    }\n    const methodsList = Object.keys(methods)\n\n    const resolveMethodName = (handler, currentController) =>\n    options.methodNames && options.methodNames[handler]\n      ? currentController[options.methodNames[handler]]\n      : currentController[handler]\n\n    /**\n     * @var {Array<[string, string]>} usedList [[handlerName, httpMethod], ...]\n     */\n    let usedList = []\n\n    if (Array.isArray(options.only)) {\n      usedList = options.only\n    }\n    else if (Array.isArray(options.except)) {\n      usedList = methodsList\n        .filter(handlerName => !options.except.includes(handlerName))\n    }\n    else {\n      usedList = methodsList\n    }\n\n    this.scope(name, (scope) => {\n      scope.beforeEach(controller.beforeEach)\n      scope.afterEach(controller.afterEach)\n\n      usedList\n        .filter(handler => methodsList.includes(handler))\n        .map(handler => [handler, methods[handler]])\n        .forEach(([handler, httpMethod]) => {\n          scope[httpMethod](resolveMethodName(handler, controller))\n        })\n\n      if (creator) {\n        creator(scope)\n      }\n    })\n  }\n\n  /**\n   * Configure your `resources('name', controller, options)`\n   * <br/> You can't use `except` and `only` at the same time\n   * <br/> Available handlers: `index`, `read`, `create`, `update`, `patch`, `destroy`\n   * @typedef {object} resourcesOptions\n   * @property {string[]} [only] Keep only that handlers\n   * @property {string[]} [except] Keep all except that handlers\n   * @property {string} [memberId] Change :memberId in the URI\n   * @since 0.9.0\n   *\n   * @example <caption>Usage with `only`</caption>\n   * createRest(root => {\n   *   // GET /books          -> index()\n   *   // GET /books/:bookId  -> read()\n   *   root.resources('books', BooksController, { only: ['read', 'index'] })\n   * })\n   *\n   * @example <caption>Usage with `except`</caption>\n   * createRest(root => {\n   *   // GET /songs              -> index()\n   *   // POST /songs             -> create()\n   *   // GET /songs/:songId      -> read()\n   *   // PATCH /songs/:songId    -> patch()\n   *   root.resources('songs', SongsController, { except: ['destroy', 'update'] })\n   * })\n   *\n   * @example <caption>With beforeEach afterEach methods</caption>\n   * const Controller = {\n   *   beforeEach() {},\n   *   afterEach() {},\n   *   create() {},\n   *   read() {},\n   * }\n   * // If controller no methods, no handlers creates\n   *\n   * createRest(root => {\n   *   // GET /demo   beforeEach(); read(); afterEach()\n   *   // POST /demo  beforeEach(); create(); afterEach()\n   *   root.crud('demo', Controller)\n   * })\n   *\n   * @example <caption>Member ID renaming</caption>\n   * createRest(root => {\n   *   // GET /images            -> index()\n   *   // POST /images           -> create()\n   *   // GET /images/:imgid     -> read()\n   *   // PUT /images/:imgid     -> update()\n   *   // PATCH /images/:imgid   -> patch()\n   *   // DELETE /images/:imgid  -> destroy()\n   *   root.resources('images', ImagesController, { memberId: 'imgid' })\n   * })\n   */\n\n  /**\n   * Add index, create, read, update, patch, remove methods to manage resource <br/>\n   * See {@link ResourcesController} and {@link resourcesOptions}\n   * @param {string} name Name of the resources. Path created from. Example: `books`\n   * @param {ResourcesController} controller Object with methods\n   * @param {resourcesOptions} [options={}] Options for resources\n   * @param {function(scope: Maker): void} [creator=null] Scoped creator function\n   * @return {void}\n   * @throws {Error} \"Resources should be named\"\n   * @throws {Error} \"You can't use 'except' and 'only' options at the same time\"\n   * @throws {TypeError} \"Controller should be object\"\n   *\n   * @example <caption>Full example</caption>\n   * createRest(root => {\n   *   // GET /users             -> index()\n   *   // POST /users            -> create()\n   *   // GET /users/:userId     -> read()\n   *   // PUT /users/:userId     -> update()\n   *   // PATCH /users/:userId   -> patch()\n   *   // DELETE /users/:userId  -> destroy()\n   *   root.resources('users', UsersController)\n   * })\n   */\n  resources(name, controller, options = {}, creator = null) {\n    /**\n     * index : get /\n     * create : post /\n     * read : get /:id\n     * update : put /:id\n     * patch : patch /:id\n     * remove : delete /:id\n     */\n    if (!name || name.length === 0) {\n      throw new Error('Resources should be named')\n    }\n\n    if (!controller || typeof controller !== 'object') {\n      throw new TypeError('Controller should be object')\n    }\n\n    if (typeof options === 'function') {\n      /* eslint-disable no-param-reassign */\n      creator = options\n      options = {}\n      /* eslint-enable no-param-reassign */\n    }\n\n    if (options.only && options.except) {\n      throw new Error('You can\\'t use \\'except\\' and \\'only\\' options at the same time')\n    }\n\n    const noMethodsSlicingOption = (!options.only || options.only.length === 0)\n      && (!options.except || options.except.length === 0)\n\n    /**\n     * Check method existing in options `only` or `except`\n     * @param {string} methodName\n     * @private\n     */\n    const checkMethod = methodName =>\n      noMethodsSlicingOption\n      || (options.only && options.only.length && options.only.includes(methodName))\n      || (options.except && options.except.length && !options.except.includes(methodName))\n\n    const memberId = options.memberId || `${pluralize.singular(name)}Id`\n\n    this.scope(name, (scope) => {\n      scope.beforeEach(controller.beforeEach)\n      scope.afterEach(controller.afterEach)\n\n      if (checkMethod('index')) {\n        scope.get('/', controller.index)\n      }\n\n      if (checkMethod('create')) {\n        scope.post('/', controller.create)\n      }\n\n      scope.scope(`:${memberId}`, (member) => {\n        if (checkMethod('read')) {\n          member.get('/', controller.read)\n        }\n\n        if (checkMethod('update')) {\n          member.put('/', controller.update)\n        }\n\n        if (checkMethod('patch')) {\n          if (controller.patch) {\n            member.patch('/', controller.patch)\n          }\n          else if (checkMethod('update')) {\n            member.patch('/', controller.update)\n          }\n          else {\n            // no PATCH /:id add\n          }\n        }\n\n        if (checkMethod('destroy')) {\n          member.delete('/', controller.destroy)\n        }\n      })\n\n      if (creator) {\n        creator(scope)\n      }\n    })\n  }\n}\n\n/**\n * Create routes by sync callback\n * @param {function(r: Maker): null} creator Callback\n * @return {RestRoutes} Routes object\n */\nexport function createRest(creator) {\n  if (typeof creator !== 'function') {\n    throw new TypeError('Creator should be a function')\n  }\n\n  const ctx = new Maker('')\n  creator(ctx)\n  return ctx.build()\n}\n\nexport { flattenRoutes } from './flatten'\nexport { printRoutes } from './printer'\n",
    "static": true,
    "longname": "lib/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 4,
    "kind": "typedef",
    "name": "CrudController",
    "memberof": "lib/index.js",
    "static": true,
    "longname": "lib/index.js~CrudController",
    "access": null,
    "description": "Controller object for `crud()` method {@link RestRoutes}",
    "examples": [
      "const DemoController = {\n  beforeEach(req, res, next) {\n    // any checks here\n    next()\n  },\n  create(req, res, next) {\n    context.makeDemo.create(req.params)\n    res.json({ complete: true })\n    next()\n  },\n  afterEach(req, res, next) {\n    // close your resources here\n    context.db.close()\n  }\n}"
    ],
    "since": "0.9.0",
    "properties": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "name": "beforeEach",
        "description": "Called before each request"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "name": "afterEach",
        "description": "Called after each request"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "name": "read",
        "description": "Handle GET /name"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "name": "create",
        "description": "Handle POST /name"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "name": "update",
        "description": "Handle PUT /name"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "name": "destroy",
        "description": "handle DELETE /name"
      }
    ],
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "CrudController"
    }
  },
  {
    "__docId__": 5,
    "kind": "typedef",
    "name": "ResourcesController",
    "memberof": "lib/index.js",
    "static": true,
    "longname": "lib/index.js~ResourcesController",
    "access": null,
    "description": "Controller object for `resources()` method. See {@link Maker.resources}",
    "since": "0.9.0",
    "properties": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "name": "beforeEach",
        "description": "Hook will invoke before each handler in controller"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "name": "afterEach",
        "description": "Hook will invoke before after handler in controller"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "name": "index",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "name": "create",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "name": "read",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "name": "update",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "name": "patch",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "name": "destroy",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "ResourcesController"
    }
  },
  {
    "__docId__": 6,
    "kind": "function",
    "name": "isCreateRestInstance",
    "memberof": "lib/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/index.js~isCreateRestInstance",
    "access": "public",
    "export": true,
    "importPath": "createrest/lib/index.js",
    "importStyle": "{isCreateRestInstance}",
    "description": "Check is correct routes passed",
    "lineNumber": 54,
    "since": "0.7.0",
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "RestRoutes"
        ],
        "spread": false,
        "optional": false,
        "name": "routes",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 7,
    "kind": "typedef",
    "name": "RestRoutes",
    "memberof": "lib/index.js",
    "static": true,
    "longname": "lib/index.js~RestRoutes",
    "access": "protected",
    "description": "Routes object",
    "properties": [
      {
        "nullable": null,
        "types": [
          "Symbol"
        ],
        "spread": false,
        "optional": false,
        "name": "Symbol(createRestInstanceSymbol)",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "before",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "after",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "scoped",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "local",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "RestRoutes"
    }
  },
  {
    "__docId__": 8,
    "kind": "class",
    "name": "Maker",
    "memberof": "lib/index.js",
    "static": true,
    "longname": "lib/index.js~Maker",
    "access": "protected",
    "export": true,
    "importPath": "createrest/lib/index.js",
    "importStyle": "{Maker}",
    "description": "",
    "lineNumber": 71,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Maker"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 9,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/index.js~Maker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/index.js~Maker#constructor",
    "access": "private",
    "description": "",
    "lineNumber": 75,
    "params": []
  },
  {
    "__docId__": 10,
    "kind": "member",
    "name": "ctx",
    "memberof": "lib/index.js~Maker",
    "static": false,
    "longname": "lib/index.js~Maker#ctx",
    "access": null,
    "description": "",
    "lineNumber": 79,
    "ignore": true,
    "type": {
      "types": [
        "{\"before\": *, \"after\": *, \"scoped\": *, \"local\": *}"
      ]
    }
  },
  {
    "__docId__": 11,
    "kind": "method",
    "name": "build",
    "memberof": "lib/index.js~Maker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/index.js~Maker#build",
    "access": "private",
    "description": "",
    "lineNumber": 91,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 12,
    "kind": "method",
    "name": "beforeEach",
    "memberof": "lib/index.js~Maker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/index.js~Maker#beforeEach",
    "access": null,
    "description": "Add middlewares before request handler to current scope and all child scope",
    "examples": [
      "const beforeHandler = () => console.log('before')\nconst getHandler = () => console.log('get')\n\ncreateRest(root => {\n  root.beforeEach(beforeHandler)\n  // GET /demo    beforeHandler(); getHandler()\n  root.get('/demo', getHandler)\n})\n// Output:\n// > before\n// > get",
      "<caption>With variable count</caption>\nconst handle1 = () => console.log('handle1')\nconst handle2 = () => console.log('handle2')\n\ncreateRest(root => {\n  root.beforeEach(handle1, handle2)\n  // same as\n  root.beforeEach(handle1)\n  root.beforeEach(handle2)\n})"
    ],
    "lineNumber": 126,
    "params": [
      {
        "nullable": null,
        "types": [
          "...function"
        ],
        "spread": true,
        "optional": false,
        "name": "list",
        "description": "List of the middlewares"
      }
    ]
  },
  {
    "__docId__": 13,
    "kind": "method",
    "name": "afterEach",
    "memberof": "lib/index.js~Maker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/index.js~Maker#afterEach",
    "access": null,
    "description": "Add middlewares after request handler to current scope and all child scope",
    "examples": [
      "const getHandler = () => console.log('get')\nconst afterHandler = () => console.log('after')\n\ncreateRest(root => {\n  root.afterEach(afterHandler)\n  // GET /demo    getHandler(); afterHandler()\n  root.get('/demo', getHandler)\n})\n// Output:\n// > get\n// > after",
      "<caption>You can combine beforeEach and afterEach</caption>\nconst getHandler = () => console.log('get foo')\nconst deleteHandler = () => console.log('DELETE requested')\nconst before1 = () => console.log('That is before 1')\nconst before2 = () => console.log('Second before')\nconst after = () => console.log('Just after request')\n\nconst routes = createRest(root => {\n  root.beforeEach(before1, before2)\n  root.afterEach(after)\n\n  // GET /foo    before1(); before2(); getHandler(); after()\n  root.get('/foo', getHandler)\n\n  root.scope('bar', bar => {\n    // DELETE /bar/baz    before1(); before2(); deleteHandler(); after()\n    bar.delete('/baz', deleteHandler)\n  })\n})\n// Output on GET /foo request:\n// > That is before 1\n// > Second before\n// > get foo\n// > Just after request\n\n// Output on DELETE /bar/baz\n// > That is before 1\n// > Second before\n// > DELETE requested\n// > Just after request"
    ],
    "lineNumber": 176,
    "params": [
      {
        "nullable": null,
        "types": [
          "...function"
        ],
        "spread": true,
        "optional": false,
        "name": "list",
        "description": "List of the middlewares"
      }
    ]
  },
  {
    "__docId__": 14,
    "kind": "method",
    "name": "scope",
    "memberof": "lib/index.js~Maker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/index.js~Maker#scope",
    "access": null,
    "description": "Add scoped address, before/after handlers and simple handlers.<br/>\nBefore/After handlers is inherits from parent scope.<br/>\nScopes with the same name will be merged",
    "examples": [
      "const before1 = () => console.log('before1')\nconst before2 = () => console.log('before2')\nconst after1 = () => console.log('after1')\nconst after2 = () => console.log('after2')\nconst bazHandler = () => console.log('baz')\nconst barHandler = () => console.log('bar')\n\ncreateRest(root => {\n  root.beforeEach(before1)\n  root.afterEach(after1)\n\n  // POST /baz   before1(); bazHandler(); after1()\n  root.post('baz', bazHandler)\n\n  root.scope('foo', foo => {\n    foo.beforeEach(before2)\n    foo.afterEach(after2)\n\n    // GET /foo/bar   before1(); before2(); barHandler(); after2(); after1()\n    foo.get('bar', barHandler)\n  })\n})"
    ],
    "lineNumber": 215,
    "since": "0.2.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Name of the scope"
      },
      {
        "nullable": null,
        "types": [
          "function(scope: Maker): void"
        ],
        "spread": false,
        "optional": false,
        "name": "creator",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "\"Name of the scope should be a word\""
      },
      {
        "types": [
          "TypeError"
        ],
        "description": "\"Name of the scope should be string!\""
      }
    ]
  },
  {
    "__docId__": 15,
    "kind": "method",
    "name": "local",
    "memberof": "lib/index.js~Maker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/index.js~Maker#local",
    "access": "private",
    "description": "Add HTTP method listeners to local",
    "lineNumber": 235,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function[]"
        ],
        "spread": false,
        "optional": false,
        "name": "listeners",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 16,
    "kind": "method",
    "name": "method",
    "memberof": "lib/index.js~Maker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/index.js~Maker#method",
    "access": null,
    "description": "Handle method creator",
    "lineNumber": 253,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function[]"
        ],
        "spread": false,
        "optional": false,
        "name": "listeners",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 17,
    "kind": "method",
    "name": "post",
    "memberof": "lib/index.js~Maker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/index.js~Maker#post",
    "access": null,
    "description": "Handle POST HTTP method with single or many handlers",
    "examples": [
      "createRest(root => {\n  root.post('name', () => console.log('Handled post /name request'))\n  root.post(() => console.log('Handled post / request'))\n  root.post('create',\n    (req, res, next) => next(),\n    authorize('user'),\n    () => console.log('Handled post /create with middlewares')\n  )\n})"
    ],
    "lineNumber": 304,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "name",
        "description": "Route path. Default is current scope"
      },
      {
        "nullable": null,
        "types": [
          "...function"
        ],
        "spread": true,
        "optional": false,
        "name": "handlers",
        "description": "List of http-handlers"
      }
    ],
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Path should not be deep"
      },
      {
        "types": [
          "TypeError"
        ],
        "description": "Maybe you forget to add listener?"
      }
    ]
  },
  {
    "__docId__": 18,
    "kind": "method",
    "name": "get",
    "memberof": "lib/index.js~Maker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/index.js~Maker#get",
    "access": null,
    "description": "Handle GET HTTP method with single or many handlers",
    "examples": [
      "createRest(root => {\n  root.get('name', () => console.log('Handled get /name request'))\n  root.get(() => console.log('Handled get / request'))\n  root.get('create',\n    (req, res, next) => next(),\n    authorize('user'),\n    () => console.log('Handled get /create with middlewares')\n  )\n})"
    ],
    "lineNumber": 325,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "name",
        "description": "Route path. Default is current scope"
      },
      {
        "nullable": null,
        "types": [
          "...function"
        ],
        "spread": true,
        "optional": false,
        "name": "handlers",
        "description": "List of http-handlers"
      }
    ],
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Path should not be deep"
      },
      {
        "types": [
          "TypeError"
        ],
        "description": "Maybe you forget to add listener?"
      }
    ]
  },
  {
    "__docId__": 19,
    "kind": "method",
    "name": "put",
    "memberof": "lib/index.js~Maker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/index.js~Maker#put",
    "access": null,
    "description": "Handle PUT HTTP method with single or many handlers",
    "examples": [
      "createRest(root => {\n  root.put('name', () => console.log('Handled put /name request'))\n  root.put(() => console.log('Handled put / request'))\n  root.put('create',\n    (req, res, next) => next(),\n    authorize('user'),\n    () => console.log('Handled put /create with middlewares')\n  )\n})"
    ],
    "lineNumber": 346,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "name",
        "description": "Route path. Default is current scope"
      },
      {
        "nullable": null,
        "types": [
          "...function"
        ],
        "spread": true,
        "optional": false,
        "name": "handlers",
        "description": "List of http-handlers"
      }
    ],
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Path should not be deep"
      },
      {
        "types": [
          "TypeError"
        ],
        "description": "Maybe you forget to add listener?"
      }
    ]
  },
  {
    "__docId__": 20,
    "kind": "method",
    "name": "delete",
    "memberof": "lib/index.js~Maker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/index.js~Maker#delete",
    "access": null,
    "description": "Handle DELETE HTTP method with single or many handlers",
    "examples": [
      "createRest(root => {\n  root.delete('name', () => console.log('Handled delete /name request'))\n  root.delete(() => console.log('Handled delete / request'))\n  root.delete('create',\n    (req, res, next) => next(),\n    authorize('user'),\n    () => console.log('Handled delete /create with middlewares')\n  )\n})"
    ],
    "lineNumber": 367,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "name",
        "description": "Route path. Default is current scope"
      },
      {
        "nullable": null,
        "types": [
          "...function"
        ],
        "spread": true,
        "optional": false,
        "name": "handlers",
        "description": "List of http-handlers"
      }
    ],
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Path should not be deep"
      },
      {
        "types": [
          "TypeError"
        ],
        "description": "Maybe you forget to add listener?"
      }
    ]
  },
  {
    "__docId__": 21,
    "kind": "method",
    "name": "patch",
    "memberof": "lib/index.js~Maker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/index.js~Maker#patch",
    "access": null,
    "description": "Handle PATCH HTTP method with single or many handlers",
    "examples": [
      "createRest(root => {\n  root.patch('name', () => console.log('Handled patch /name request'))\n  root.patch(() => console.log('Handled patch / request'))\n  root.patch('create',\n    (req, res, next) => next(),\n    authorize('user'),\n    () => console.log('Handled patch /create with middlewares')\n  )\n})"
    ],
    "lineNumber": 388,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "name",
        "description": "Route path. Default is current scope"
      },
      {
        "nullable": null,
        "types": [
          "...function"
        ],
        "spread": true,
        "optional": false,
        "name": "handlers",
        "description": "List of http-handlers"
      }
    ],
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Path should not be deep"
      },
      {
        "types": [
          "TypeError"
        ],
        "description": "Maybe you forget to add listener?"
      }
    ]
  },
  {
    "__docId__": 22,
    "kind": "typedef",
    "name": "crudOptions",
    "memberof": "lib/index.js~Maker",
    "static": true,
    "longname": "lib/index.js~Maker.crudOptions",
    "access": null,
    "description": "Configure your `crud('name', controller, options)` <br /> See {@link Maker.crud}",
    "examples": [
      "<caption>Usage with `only`</caption>\ncreateRest(root => {\n  root.crud('foo', FooController, { only: ['read'] })\n})",
      "<caption>Usage with `except`</caption>\ncreateRest(root => {\n  root.crud('bar', BarController, { except: ['destroy', 'update'] })\n})",
      "<caption>Method names</caption>\nconst Controller = {\n  createDemo() {},\n  updateMe() {},\n  justExample() {},\n  youDontNeedThis() {},\n}\ncreateRest(root => {\n  root.crud('demo', Controller, { methodNames: {\n    read: 'justExample', create: 'createDemo', update: 'updateMe', destroy: 'youDontNeedThis',\n  }})\n})"
    ],
    "since": "0.9.0",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "name": "only",
        "description": "Keep only that handlers: `read`, `create`, `update`, `destroy`"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "name": "except",
        "description": "Keep all except that handlers"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "methodNames",
        "description": "Change method names"
      }
    ],
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "crudOptions"
    }
  },
  {
    "__docId__": 23,
    "kind": "method",
    "name": "crud",
    "memberof": "lib/index.js~Maker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/index.js~Maker#crud",
    "access": null,
    "description": "Add CRUD methods for single resource. <br/>\nCRUD methods not merging. __Use only one crud for path.__",
    "examples": [
      "<caption>Simple</caption>\nconst Controller = {\n  read() {},\n  create() {},\n  update() {},\n  destroy() {},\n  beforeEach() {},\n  afterEach() {},\n}\nconst routes = createRest(root => {\n  // GET /example     read()\n  // POST /example    create()\n  // PUT /example     update()\n  // DELETE /example  destroy()\n  root.crud('example', Controller)\n})",
      "<caption>Only/Except option</caption>\nconst Controller = {\n  read() {},\n  create() {},\n  update() {},\n  destroy() {},\n  beforeEach() {},\n  afterEach() {},\n}\nconst routes = createRest(root => {\n  // GET /demo    read()\n  // POST /demo   create()\n  root.crud('demo', Controller, { only: ['create', 'read'] })\n\n  // GET /single     read()\n  // PUT /single     update()\n  root.crud('single', Controller, { except: ['destroy', 'create'] })\n})",
      "<caption>With scope</caption>\nconst routes = createRest(root => {\n  // GET /example\n  // POST /example\n  // PUT /example\n  // DELETE /example\n  root.crud('example', Controller, {}, example => {\n    // GET /example/demo\n    example.get('/demo', () => {})\n  })\n})"
    ],
    "lineNumber": 478,
    "since": "0.9.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Name of the resource. Create route path from"
      },
      {
        "nullable": null,
        "types": [
          "CrudController"
        ],
        "spread": false,
        "optional": false,
        "name": "controller",
        "description": "Object with methods"
      },
      {
        "nullable": null,
        "types": [
          "crudOptions"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": "Options object"
      },
      {
        "nullable": null,
        "types": [
          "function(scope: Maker): void"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "creator",
        "description": "Scoped creator function"
      }
    ]
  },
  {
    "__docId__": 24,
    "kind": "typedef",
    "name": "resourcesOptions",
    "memberof": "lib/index.js~Maker",
    "static": true,
    "longname": "lib/index.js~Maker.resourcesOptions",
    "access": null,
    "description": "Configure your `resources('name', controller, options)`\n<br/> You can't use `except` and `only` at the same time\n<br/> Available handlers: `index`, `read`, `create`, `update`, `patch`, `destroy`",
    "examples": [
      "<caption>Usage with `only`</caption>\ncreateRest(root => {\n  // GET /books          -> index()\n  // GET /books/:bookId  -> read()\n  root.resources('books', BooksController, { only: ['read', 'index'] })\n})",
      "<caption>Usage with `except`</caption>\ncreateRest(root => {\n  // GET /songs              -> index()\n  // POST /songs             -> create()\n  // GET /songs/:songId      -> read()\n  // PATCH /songs/:songId    -> patch()\n  root.resources('songs', SongsController, { except: ['destroy', 'update'] })\n})",
      "<caption>With beforeEach afterEach methods</caption>\nconst Controller = {\n  beforeEach() {},\n  afterEach() {},\n  create() {},\n  read() {},\n}\n// If controller no methods, no handlers creates\n\ncreateRest(root => {\n  // GET /demo   beforeEach(); read(); afterEach()\n  // POST /demo  beforeEach(); create(); afterEach()\n  root.crud('demo', Controller)\n})",
      "<caption>Member ID renaming</caption>\ncreateRest(root => {\n  // GET /images            -> index()\n  // POST /images           -> create()\n  // GET /images/:imgid     -> read()\n  // PUT /images/:imgid     -> update()\n  // PATCH /images/:imgid   -> patch()\n  // DELETE /images/:imgid  -> destroy()\n  root.resources('images', ImagesController, { memberId: 'imgid' })\n})"
    ],
    "since": "0.9.0",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "name": "only",
        "description": "Keep only that handlers"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "name": "except",
        "description": "Keep all except that handlers"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "memberId",
        "description": "Change :memberId in the URI"
      }
    ],
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "resourcesOptions"
    }
  },
  {
    "__docId__": 25,
    "kind": "method",
    "name": "resources",
    "memberof": "lib/index.js~Maker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/index.js~Maker#resources",
    "access": null,
    "description": "Add index, create, read, update, patch, remove methods to manage resource <br/>\nSee {@link ResourcesController} and {@link resourcesOptions}",
    "examples": [
      "<caption>Full example</caption>\ncreateRest(root => {\n  // GET /users             -> index()\n  // POST /users            -> create()\n  // GET /users/:userId     -> read()\n  // PUT /users/:userId     -> update()\n  // PATCH /users/:userId   -> patch()\n  // DELETE /users/:userId  -> destroy()\n  root.resources('users', UsersController)\n})"
    ],
    "lineNumber": 609,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Name of the resources. Path created from. Example: `books`"
      },
      {
        "nullable": null,
        "types": [
          "ResourcesController"
        ],
        "spread": false,
        "optional": false,
        "name": "controller",
        "description": "Object with methods"
      },
      {
        "nullable": null,
        "types": [
          "resourcesOptions"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": "Options for resources"
      },
      {
        "nullable": null,
        "types": [
          "function(scope: Maker): void"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "creator",
        "description": "Scoped creator function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "\"Resources should be named\""
      },
      {
        "types": [
          "Error"
        ],
        "description": "\"You can't use 'except' and 'only' options at the same time\""
      },
      {
        "types": [
          "TypeError"
        ],
        "description": "\"Controller should be object\""
      }
    ]
  },
  {
    "__docId__": 26,
    "kind": "function",
    "name": "createRest",
    "memberof": "lib/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/index.js~createRest",
    "access": null,
    "export": true,
    "importPath": "createrest/lib/index.js",
    "importStyle": "{createRest}",
    "description": "Create routes by sync callback",
    "lineNumber": 702,
    "params": [
      {
        "nullable": null,
        "types": [
          "function(r: Maker): null"
        ],
        "spread": false,
        "optional": false,
        "name": "creator",
        "description": "Callback"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RestRoutes"
      ],
      "spread": false,
      "description": "Routes object"
    }
  },
  {
    "__docId__": 27,
    "kind": "file",
    "name": "lib/printer.js",
    "content": "import { flattenRoutes } from './flatten'\n\n/**\n * @namespace printer\n */\n\n/**\n * @private\n * @param {string} path\n * @param {string} method\n * @param {Function[]} handlers\n * @return {string}\n */\nfunction print(path, method, handlers) {\n  const handlersNames = handlers.map(handler => `${handler.displayName || handler.name || '<function>'}()`).join(', ')\n\n  return `${method.toUpperCase()} ${path} -> ${handlersNames}`\n}\n\n/**\n * Print routes to console and string\n * @param {RestRoutes} routes\n * @param {boolean} realPrint\n * @return {string[]} Lines of the printed routes\n */\nexport function printRoutes(routes, realPrint = true) {\n  const flat = flattenRoutes(routes)\n  const lines = []\n\n  Object.keys(flat)\n    .forEach((path) => {\n      const methods = flat[path]\n\n      Object.keys(methods).forEach((method) => {\n        lines.push(print(path, method, methods[method]))\n      })\n    })\n\n  if (realPrint) {\n    // eslint-disable-next-line no-console\n    console.log(lines.join('\\n'))\n  }\n\n  return lines\n}\n",
    "static": true,
    "longname": "lib/printer.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 28,
    "kind": "function",
    "name": "print",
    "memberof": "lib/printer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/printer.js~print",
    "access": "private",
    "export": false,
    "importPath": "createrest/lib/printer.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function[]"
        ],
        "spread": false,
        "optional": false,
        "name": "handlers",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 29,
    "kind": "function",
    "name": "printRoutes",
    "memberof": "lib/printer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/printer.js~printRoutes",
    "access": null,
    "export": true,
    "importPath": "createrest/lib/printer.js",
    "importStyle": "{printRoutes}",
    "description": "Print routes to console and string",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "RestRoutes"
        ],
        "spread": false,
        "optional": false,
        "name": "routes",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "realPrint",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "Lines of the printed routes"
    }
  },
  {
    "__docId__": 30,
    "kind": "file",
    "name": "lib/symbol.js",
    "content": "/**\n * @private\n */\nexport const createRestInstanceSymbol = Symbol('createRestInstance')\n",
    "static": true,
    "longname": "lib/symbol.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 31,
    "kind": "variable",
    "name": "createRestInstanceSymbol",
    "memberof": "lib/symbol.js",
    "static": true,
    "longname": "lib/symbol.js~createRestInstanceSymbol",
    "access": "private",
    "export": true,
    "importPath": "createrest/lib/symbol.js",
    "importStyle": "{createRestInstanceSymbol}",
    "description": "",
    "lineNumber": 4,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 49,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 50,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 51,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 52,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 53,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 54,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 55,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 56,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 57,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 58,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 59,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 60,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 61,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 62,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 63,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 64,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 65,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 66,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 67,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 68,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 69,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 70,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 71,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 72,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 73,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 74,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 75,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 76,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 77,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 78,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 79,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "lineNumber": 193,
    "builtinExternal": true
  },
  {
    "__docId__": 81,
    "kind": "external",
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 82,
    "kind": "external",
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 83,
    "kind": "external",
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 84,
    "kind": "external",
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 85,
    "kind": "external",
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 86,
    "kind": "external",
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 87,
    "kind": "external",
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 88,
    "kind": "external",
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "lineNumber": 34,
    "builtinExternal": true
  }
]